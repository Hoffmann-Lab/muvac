# MUVAC
**MUVAC** is an ultra fast germline and somatic variant caller pipeline for model and non-model organisms.
It implements **GATK best practices** and beyond in an optimized, parallelized fashion.

MUVAC leverages on bashbone, but comes with its own more lightweight installer

MUVAC can be applied on 
- RAW FASTQ (Exome-Seq/WG-Seq/RNA-Seq) data 
- BAM alignment files of different preprocessing states

MUVAC makes use of my **bashbone** bash library, designed as a comprehensive collection of function for 
NGS data analyses and visualization, which can be easily extended. Furthermore, bashbone offers extended
functionality to parse options, to write and execute commands (or series thereof) of any programming language
directly in your bash script and to log their outputs in different verbosity levels. It also supports object
oriented like member function for bash arrays and associative arrays (hashes).

To see a full list of functions, complete the INSTALLATION procedure (see below) and run
```
source $MUVAC/latest/bashbone/activate.sh
bashbone -h
``` 
> Each function comes with its own usage:
> ```
> ...
> preprocess::trimmomatic -h
> cluster::coexpression -h
> enrichment::go -h
> ...
> ```

## INSTALLATION
The installation does not require root permissions. All necessary tools are shipped via conda or will be
compiled locally. To do so just run
```
export MUVAC=/path/to/muvac/installation
./setup.sh -i all -d $MUVAC
```

## DOWNLOAD GENOMES
HG19, HG38, MM10 genomes, annotations (GTF, GO) and corresponding dbSNP can be retrieved via
```
$MUVAC/latest/bashbone/scripts/dlgenome.sh -g [hg19|hg38|mm10] -s -d -o [/path/to/genome/dir]
```

## UPGRADE
In case a new bashbone or MUVAC version is available, run
```
./setup.sh -i upgrade -d $MUVAC
```
To revert to an older release, simply re-define the symlinks in the $MUVAC/lastest directory


## RUN
# FIRST RUN INFO
- genomes will be indexed for selected mappers
=> do not run multiple MUVAC instances in parallel unless indexes are created
- in case indexes are already present
=> copy $MUVAC/latest/bashbone/lib/md5.sh to [genome].fa.md5.sh and insert values returned by the command 'md5sum [file]'

# ADDITIONAL INFO
Human genome chromosomes must follow GATK order and naming schema: chrM,chr1..chr22,chrX,chrY
This requierement needs to be fulfilled in all associated VCF files, too - see below.
HG19, HG38 or MM10 genome and dbSNP can be retrieved using the script: $MUVAC/latest/bashbone/dlgenome.sh

To obtain panel of normals, common somatic variants and population variants with allele frequencies visit
HG38: https://console.cloud.google.com/storage/browser/gatk-best-practices/somatic-hg38/
HG19: https://console.cloud.google.com/storage/browser/gatk-best-practices/somatic-b37/
After download, place the files next to your genome fasta file with equal name plus extension suffix as shown
[genome].fa.somatic_common.vcf.gz, genome.fa.somatic_common.vcf.gz.tbi
[genome].fa.pon.vcf.gz, genome.fa.pon.vcf.tbi
[genome].fa.af_only_gnomad.vcf.gz, genome.fa.af_only_gnomad.vcf.gz.tbi

Analogously, obtain a dbSNP file, extract and re-name it to: [genome].fa.vcf
HG38: ftp://ftp.ensembl.org/pub/current_variation/vcf/homo_sapiens/
HG19: ftp://ftp.ensembl.org/pub/grch37/current/variation/vcf/homo_sapiens/	

# SUMMARY
- on the very first execution of MUVAC, do not run multiple instances in parallel
- make sure to have your genome and dbSNP vcf file in the same directory
- make sure your genome file ends with '.fa' and your dbSNP file ends with '.fa.vcf'
- make sure your genome file ends with '.fa' and vcf.gz files ends with '.somatic_common.vcf.gz', '.pon.vcf.gz', '.af_only_gnomad.vcf.gz'
- make sure the file name prefixes of your genome and vcf file are equal (e.g. hg19.fa and hg19.fa.vcf)
- make sure the fasta headers in your genome are named and sorted this way '>chrM' '>chr1' ... '>chr22' '>chrX' '>chrY'

# EXAMPLES

...todo...

## REFERENCES
(c) Konstantin Riege
konstantin{a}bioinf{.}uni-leipzig{.}de
konstantin.riege{a}leibniz-fli{.}de

In case of troubles, don't hesitate to contact me

## UTILITIES
Tool | Description | Reference
:---: | :--- | :---
segemehl | Short sequence read to reference genome mapper | [Otto et al. 2014](https://doi.org/10.1093/bioinformatics/btu146)
Cutadapt | Error-tolerant adapter removal tool for High-Throughput Sequencing reads | [Martin 2011](https://doi.org/10.14806/ej.17.1.200)
FastQC | A quality control tool for high throughput sequence data | [Andrews](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/)
Trimmomatic | Quality control tool for read trimming and filtering of Illumina NGS data | [Bolger et al. 2014](https://doi.org/10.1093/bioinformatics/btu170)
Rcorrector | A kmer-based error correction method for RNA-seq data | [Song et al. 2015](https://doi.org/10.1186/s13742-015-0089-y)
SortMeRNA | A tool for filtering, mapping and OTU-picking NGS reads in metatranscriptomic and -genomic data | [Kopylova et al. 2011](https://doi.org/10.1093/bioinformatics/bts611)
SAMtools | Utilities for manipulating alignments in the SAM format | [Heng et al. 2009](https://doi.org/10.1093/bioinformatics/btp352)
BEDTools | Utilities for genome arithmetic | [Quinlan et al. 2010](https://doi.org/10.1093/bioinformatics/btq033)

todo:
GATK
VT
BCFtools
biomartR
sratoolkit
vcflib
bgzip
tabix

todo info:
add GQ, MAF, COV, ...
split multiallelic hits, keep best

upcoming release:
variable site based tree inference with raxml
